#!/usr/bin/perl
# borgvik backup v1.1
#
# GPLv2
#
#	https://github.com/tryggvi/borgvik
#
# Author: Tryggvi Farestveit <trygvi@linux.is>
#############################
use strict;
use Data::Dumper;
use Getopt::Long;
use Config::Simple;

########### Do not edit below ###########
my ($o_verb, $o_help, $o_test, $o_debug, $o_run, $o_create, $o_list, $o_name, $o_info, $o_restore, $o_config);

# Config file options
my ($repo_name, $repo_secret, $repo_url, $include, $exclude, $logfile, $logfile2, $logdir, $debug);


# Get information from config file
sub ReadConfig(){
	my $cfg = new Config::Simple($o_config);
	$repo_name = $cfg->param('repo_name');
	$repo_secret = $cfg->param('repo_secret');
	$repo_url = $cfg->param('repo_url');
	$include = $cfg->param('include');
	$exclude = $cfg->param('exclude');
	$logfile = $cfg->param('logfile');
	$logfile2 = $cfg->param('logfile2');
	$logdir = $cfg->param('logdir');
	$debug = $cfg->param('debug');

	# Print information if verbose
	print "Configfile input:\n$repo_name, $repo_secret, $repo_url, $include, $exclude, $logfile, $logfile2, $logdir, $debug\n" if $o_verb;

	DirExists($logdir);
	$ENV{'BORG_PASSPHRASE'} = $repo_secret;
}

# Logging
sub printlog($){
	my($text) = @_;
	my ($sec,$min,$hour,$day,$month,$year) = gettime();
	my $out = "$year-$month-$day $hour:$min:$sec $text";

	if(!$logfile || $logdir){
		print "Logfile or logdir missing\n" if $o_verb;
	} else {
		my $l = $logdir."/".$logfile;
		open(LOG, ">>$l");
		print LOG $out."\n";
		close(LOG);
	}

	if($o_verb){
		print $out."\n";
	} 
}

# Input validation
sub check_options {
	Getopt::Long::Configure ("bundling");
	GetOptions(
		'v'     => \$o_verb,            'verbose'	=> \$o_verb,
		'h'     => \$o_help,            'help'	=> \$o_help,
		'd'     => \$o_debug,            'debug'	=> \$o_debug,
		't'     => \$o_test,            'test'	=> \$o_test,
		'b'     => \$o_run,            'backup'	=> \$o_run,
		'C:s'     => \$o_config,            'config:s'	=> \$o_config,
		'c'     => \$o_create,            'create'	=> \$o_create,
		'l'     => \$o_list,            'list'	=> \$o_list,
		'i'     => \$o_info,            'info'	=> \$o_info,
		'r'     => \$o_restore,            'restore'	=> \$o_restore,
		'n:s'     => \$o_name,
	);

	if(defined ($o_help) || (!defined($o_run) && !defined($o_create) && !defined($o_list)) && !defined($o_info) && !defined($o_restore)){
		help();
		exit 1;
	}


	if(!defined($o_config)){
		print "Configuration file missing. Use $0 --config=file\n";
		exit;
	} else {
		ReadConfig();
	}

	if(defined($o_test)){
		$o_test=1;
		print "Dry run\n";
	}

	if(defined($o_debug)){
		print "export BORG_PASSPHRASE='$repo_secret'\n";
		$debug=1;
		$o_test=1;
		$o_verb=1;
	}

	if(defined($o_run)){
		# Run backup
		RunBackup();
	}

	if(defined($o_create)){
		CreateRepo();		
	}

	if(defined($o_list)){
		List();		
	}

	if(defined($o_info)){
		Info();		
	}

	if(defined($o_restore)){
		Restore();		
	}
}

# Help
sub help() {
	print "$0\n";
        print <<EOT;
-v, --verbose
        print extra debugging information
-d, --debug
        print debug information (will show secret key)
-t, --test
        Do not execute, only dry run
-i, --info
        Display information
-l, --list
        List archives
-r, --restore
        Restore examples
-b, --backup
        Run backup
-c, --create
	Create initial repo (first time)
-h, --help
	print this help message
EOT
}

sub print_usage() {
        print "Usage: $0 [-v] ]\n";
}

# If dir does not exist, create it.
sub DirExists($){
	my ($dir) = @_;
	if(!-e $dir){
		printlog("Creating $dir");
		mkdir $dir, 0700;
	}
}

# Convert array to exclude string
sub ArrayToExclude(@){
	my (@dirs) = @_;

	my $out;
	foreach(@dirs){
		$out .= "--exclude=\"$_\" ";
	}
	return $out;
}

# Convert array to include string
sub ArrayToInclude(@){
	my (@dirs) = @_;

	my $out;
	foreach(@dirs){
		$out .= "$_ ";

	}
	return $out;
}

# Get current time
sub gettime(){
	my $input = time();
	my ($sec,$min,$hour,$day,$month,$year) = (localtime($input))[0,1,2,3,4,5];
	$year = $year +1900;
	$month = $month +1 ;
	if($month < 10){
		$month = "0$month";
	}

	if($day < 10){
		$day = "0$day";
	}

	if($hour < 10){
		$hour = "0$hour";
	}

	if($min < 10){
		$min = "0$min";
	}

	return ($sec,$min,$hour,$day,$month,$year);
}

sub CreateRepo(){
	my $cmd = "borg init --encryption=repokey-blake2 ".$repo_url;
	print "$cmd\n" if $o_test;
	if(!$o_test){
		printlog("Creating repo");
		open(CMD, "$cmd|");
		close(CMD);
	}
}

sub List(){
	if($o_name){
		my $cmd = "borg list  ".$repo_url."::".$o_name;
		print "$cmd\n" if $o_test;
		if(!$o_test){
			system($cmd);
		}
	} else {
		my $cmd = "borg list  ".$repo_url;
		print "$cmd\n" if $o_test;

		if(!$o_test){
			system($cmd);
		}
		print "\n";
		print "Choose a archive name and use the options below\n";
		print "$0 -l -n $repo_name--xx\n";
	} 
}

sub Info(){
	print "Repo: ".$repo_url."::\n";
}

sub Restore(){
	print "Restore example\n";
	print "1. Get list of archive\n";
	print "$0 --config=$o_config -l\n\n";
	print "2. Get list of archive contents\n";
	print "$0 --config=$o_config -l -n xxx\n\n";
	print "3. Restore manually\n";
	print "borg extract ".$repo_url."::".$repo_name."--xxx directory/file\n";
	print "\n";
	print "For secret key use -d argument\n\n";
}

# Remove comma
sub Clean($){
	my ($input) = @_;

	$input =~ s/, / /g; # Change xx, yy to xx yy
	$input =~ s/,/ /g; # Change xx,yy to xx yy

	return ($input);
}

sub RunBackup(){
	# Logging starts
	my $bdir = Clean($include);

	my ($sec,$min,$hour,$day,$month,$year) = gettime();
	my $backup_suffix = "$year-$month-$day-$hour-$min";

	my $cmd = "borg create --verbose --filter AME --list --stats --show-rc --compression lz4 --exclude-caches ".$repo_url."::".$repo_name."--{now} $bdir";
	print "$cmd\n" if $o_test;

	if(!$o_test){
		printlog("Running backup");
		if($o_verb){
			open(CMD, "$cmd|");
			close(CMD);
		} else {
			my $l = $logdir."/".$logfile2;
			system("$cmd 2>> $l");
		}
		printlog("Finished");
	}
}

### Main
check_options();
